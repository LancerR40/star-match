{"version":3,"sources":["StarMatch.js","index.js"],"names":["PlayAgain","props","className","style","color","gameStatus","onClick","StarsDisplay","utils","range","count","map","starId","PlayNumber","backgroundColor","colors","status","number","Game","useState","random","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","length","timerId","setTimeout","clearTimeout","setGameState","newCandidateNums","sum","newAvailableNums","filter","n","includes","randomSumIn","useGameState","candidatesAreWrong","numberStatus","onNumberClick","currentStatus","concat","cn","startNewGame","available","used","wrong","candidate","arr","reduce","acc","curr","min","max","Array","from","_","i","Math","floor","sets","sums","j","len","candidateSet","candidateSum","push","StarMatch","gameId","setGameId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e28b0d8.chunk.js","sourcesContent":["import './StarMatch.css';\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst PlayAgain = props => (\r\n    <div className=\"game-done\">\r\n        <div className=\"message\" style={{ color: props.gameStatus === 'lost' ? 'red' : 'green' }}>{props.gameStatus === 'lost' ? 'Game Over' : 'Nice'}</div>\r\n        <button onClick={props.onClick}>Play Again</button>\r\n    </div>\r\n);\r\n\r\nconst useGameState = () => {\r\n    const [stars, setStars] = useState(utils.random(1, 9));\r\n    const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\r\n    const [candidateNums, setCandidateNums] = useState([]);\r\n    const [secondsLeft, setSecondsLeft] = useState(10);\r\n\r\n    useEffect(() => {\r\n        if (secondsLeft > 0 && availableNums.length > 0) {\r\n            const timerId = setTimeout(() => {\r\n                setSecondsLeft(secondsLeft - 1);\r\n            }, 1000);\r\n            return () => clearTimeout(timerId);\r\n        }\r\n    });\r\n\r\n    const setGameState = newCandidateNums => {\r\n        if (utils.sum(newCandidateNums) !== stars) {\r\n            setCandidateNums(newCandidateNums);\r\n        } else {\r\n            const newAvailableNums = availableNums.filter(\r\n                n => !newCandidateNums.includes(n)\r\n            );\r\n            setStars(utils.randomSumIn(newAvailableNums, 9));\r\n            setAvailableNums(newAvailableNums);\r\n            setCandidateNums([]);\r\n        }\r\n    }\r\n\r\n    return { stars, availableNums, candidateNums, secondsLeft, setGameState };\r\n};\r\n\r\nconst StarsDisplay = props => (\r\n    utils.range(1, props.count).map(starId => <div key={starId} className=\"star\" /> )\r\n);\r\n\r\nconst PlayNumber = props => (\r\n    <button \r\n        className=\"number\" \r\n        style={{ backgroundColor: colors[props.status] }} \r\n        onClick={() => props.onClick(props.number, props.status)}>{props.number}\r\n    </button>\r\n);\r\n\r\nconst Game = props => {\r\n    const { stars, availableNums, candidateNums, secondsLeft, setGameState } = useGameState();\r\n\r\n    const candidatesAreWrong = utils.sum(candidateNums) > stars;\r\n    const gameStatus = availableNums.length === 0\r\n        ? 'won'\r\n        : secondsLeft === 0 ? 'lost' : 'active';\r\n\r\n    const numberStatus = number => {\r\n        if (!availableNums.includes(number)) {\r\n            return 'used';\r\n        }\r\n\r\n        if (candidateNums.includes(number)) {\r\n            return candidatesAreWrong ? 'wrong' : 'candidate';\r\n        }\r\n        \r\n        return 'available';\r\n    };\r\n\r\n    const onNumberClick = (number, currentStatus) => {\r\n        // currentStatus => newStatus\r\n        if (gameStatus !== 'active' || currentStatus === 'used') {\r\n            return;\r\n        }\r\n\r\n        // candidateNums\r\n        const newCandidateNums = currentStatus === 'available'\r\n            ? candidateNums.concat(number)\r\n            : candidateNums.filter(cn => cn !== number);\r\n\r\n        setGameState(newCandidateNums);\r\n    };\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <div className=\"game\">\r\n                <div className=\"help\">\r\n                    Pick 1 or more numbers that sum to the number of stars\r\n                </div> \r\n                <div className=\"body\">\r\n                    <div className=\"left\">\r\n                        {gameStatus !== 'active' ? <PlayAgain onClick={props.startNewGame} gameStatus={gameStatus} /> : <StarsDisplay count={stars} />}\r\n                    </div>\r\n                    <div className=\"right\">\r\n                        {utils.range(1, 9).map(number => <PlayNumber key={number} number={number} status={numberStatus(number)} onClick={onNumberClick} />)}\r\n                    </div>\r\n                </div>\r\n                <div className=\"timer\">Time Remaining: {secondsLeft}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst StarMatch = () => {\r\n    const [gameId, setGameId] = useState(1);\r\n\r\n    return (\r\n        <Game key={gameId} startNewGame={() => setGameId(gameId + 1)} />\r\n    );\r\n};\r\n\r\n// Color theme\r\nconst colors = {\r\n    available: 'lightgray',\r\n    used: 'lightgreen',\r\n    wrong: 'lightcoral',\r\n    candidate: 'deepskyblue'\r\n};\r\n\r\n// Math science\r\nconst utils = {\r\n    // Sum an array\r\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n\r\n    // Create an array of numbers between min and max (edges included)\r\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n\r\n    // Pick a random number between min and max (edges included)\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n\r\n    // Given an array of numbers and a max...\r\n    // Pick a random sum (< max) from the set of all available sums in arr\r\n    randomSumIn: (arr, max) => {\r\n        const sets = [[]];\r\n        const sums = [];\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let j = 0, len = sets.length; j < len; j++) {\r\n                const candidateSet = sets[j].concat(arr[i]);\r\n                const candidateSum = utils.sum(candidateSet);\r\n\r\n                if (candidateSum <= max) {\r\n                    sets.push(candidateSet);\r\n                    sums.push(candidateSum);\r\n                };\r\n            };\r\n        };\r\n        return sums[utils.random(0, sums.length - 1)];\r\n    },\r\n};\r\n\r\nexport default StarMatch;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport StarMatch from './StarMatch';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StarMatch />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}